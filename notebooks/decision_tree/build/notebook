>>> md

# Построение дерева

Что ж, у нас есть критерий ветвления Джини и способ разделения выборки на две подвыборки согласно этому критерию.

### Но на этом ведь дерево не построить!?

Ну, если выборка будет состоять всего из двух классов,
которые можно явно разделить одним предикатом, то можно!

Но к сожалению очень большая часть данных, с которыми приходится работать датасатанистам,
не такая простая, а очень даже сложная!

### И что же делать в таком случае?

Ну, пока мы можем разделить выборку один раз. В предыдущей статье мы успешно отделили
класс **setosa** от остальных классов. **setosa** пошла в левую сторону, а **versicolor** и **virginica** в правую.

Так как в левой ветви все элементы принадлежат одному классу, то там стоит построить **терминальный узел**.
Это тот который называется "листом🍁" дерева. Терминальный узел хранит в себе значение класса,
к которому будут относится объекты, попавшие в "лист🍁".

## Терминальный узел
>>> code id=terminal_editor
>>> md

Но если для левой стороны всё понятно, то в правой стороне есть два класса. Их ведь тоже стоит разделить.

### Значит нам нужно строить дерево рекурсивно!

Да! Для каждого узла мы будем решать: разделить выборку или построить терминальный узел.

Если мы решим что выборку нужно поделить, то текущий узел будет "внутренним узлом", от которого пойдут
два новых - левый и правый. И с каждым новым узлом мы будем повторять эту процедуру.

## Условия завершения построения

Ещё стоит уточнить, что решающим деревьям свойственно переобучение. Это состояние, при которым обученное
дерево хорошо классифицирует объекты по которым обучалась и плохо классифицирует новые объекты.
Переобучение происходит когда дерево очень сильно разрастается.

Нам нужно решить когда стоит прекратить выращивать дерево.

В жизни вообще очень важно понимать когда стоит остановиться!

Мы можем остановить рост дерева когда оно достигает **определённой глубины** или остановить рост ветки, если
подвыборка достигает **определённого размера**.

## Рекурсивное построение дерева
>>> code id=split_editor
>>> md

## Тестирование реализации

Теперь, когда у нас готов алгоритм построения дерева, давайте затестируем его.

Ты так же можешь менять код во всех редакторах, это будет влиять на итоговое поведение программы.

>>> code id=test_editor
>>> md

>>> fetch
text: get_split_txt = get_split.py
text: terminal_txt = terminal.py
text: split_txt = build_tree.py
text: test_txt = test.py
>>> js
    var terminal_editor = ace.edit("terminal_editor");
    terminal_editor.getSession().setValue(terminal_txt);
    terminal_editor.setOptions({maxLines: 60, minLines: 7});

    var split_editor = ace.edit("split_editor");
    split_editor.getSession().setValue(split_txt);

    var test_editor = ace.edit("test_editor");
    test_editor.getSession().setValue(test_txt);

    let test_code_output = lite_notebook.elements.code_output();
    lite_notebook.screen.appendChild(test_code_output);
    test_code_output.attachEditor(test_editor);

    test_code_output.before_launch = () => {
        test_code_output.pre_codes = [
            get_split_txt,
            terminal_editor.getValue(),
            split_editor.getValue(),
        ];
    }